# -*- coding: utf-8 -*-
"""Fashion Mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/144ReNUcPxs17bgS7xri-XYWN3wAZPzQB
"""

import tensorflow as tf;
import numpy as np;
import pandas as pd;
import matplotlib.pyplot as plt;
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Flatten, Dense, Dropout;
(x_train,y_train),(x_test,y_test)=tf.keras.datasets.fashion_mnist.load_data();

x_train=np.expand_dims(x_train,-1);
x_test =np.expand_dims(x_test,-1);
x_train=x_train/255.0
x_test=x_test/255.0
K=len(set(y_train))

i=Input(shape=x_train[0].shape)
x=Conv2D(32,(3,3),strides=2,padding='same',activation='relu')(i)
x=Conv2D(64,(3,3),strides=2,padding='same',activation='relu')(x)
x=Flatten()(x)
x=Dense(64,activation='relu')(x)
x=Dense(K,activation='softmax')(x)
model=tf.keras.Model(i,x)

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])
out=model.fit(x_train,y_train,batch_size=100,epochs=10,validation_data=(x_test,y_test))

model.summary()

plt.plot(out.history['accuracy'],label='Train_accuracy')
plt.plot(out.history['val_accuracy'],label='Test_accuracy')
plt.legend()
plt.show()

from sklearn.metrics import confusion_matrix
import itertools
def plot_confusion_matrix(cm,num_classes):
  plt.figure(figsize=(7,6))
  plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
  plt.title("Confusion matrix");
  plt.colorbar()
  plt.xticks(np.arange(num_classes));
  plt.yticks(np.arange(num_classes));
  thresh = cm.max() / 2.
  for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
      plt.text(j, i, format(cm[i, j], 'd'),horizontalalignment="center",color="white" if cm[i, j] > thresh else "black");
  plt.tight_layout();
  plt.ylabel('True label');
  plt.xlabel('Predicted label');
  plt.show()
y_pred=np.argmax(model.predict(x_test),axis=1)
plot_confusion_matrix(confusion_matrix(y_test,y_pred),K);

labels = '''T-shirt/top
Trouser
Pullover
Dress
Coat
Sandal
Shirt
Sneaker
Bag
Ankle boot'''.split("\n")

mismatch_idx=np.where((y_pred==6)&(y_test==0))[0]
i=np.random.choice(mismatch_idx)
plt.imshow(x_test[i].reshape(28,28),cmap='gray')
plt.title("True Label : {} Predicted Label : {}".format(labels[y_test[i]],labels[y_pred[i]]))
plt.show()